.\" Automatically generated by Pod::Man 2.12 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Wav::Read 3"
.TH Wav::Read 3 "2009-01-26" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Audio::Wav::Read \- Module for reading Microsoft WAV files.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    use Audio::Wav;
\&    my $wav = new Audio::Wav;
\&    my $read = $wav \-> read( 'filename.wav' );
\&    my $details = $read \-> details();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Reads Microsoft Wav files.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Audio::Wav
.PP
Audio::Wav::Write
.SH "NOTES"
.IX Header "NOTES"
This module shouldn't be used directly, a blessed object can be returned from Audio::Wav.
.SH "METHODS"
.IX Header "METHODS"
.Sh "file_name"
.IX Subsection "file_name"
Returns the file name.
.PP
.Vb 1
\&    my $file = $read \-> file_name();
.Ve
.Sh "get_info"
.IX Subsection "get_info"
Returns information contained within the wav file.
.PP
.Vb 1
\&    my $info = $read \-> get_info();
.Ve
.PP
Returns a reference to a hash containing;
(for example, a file marked up for use in Audio::Mix)
.PP
.Vb 5
\&    {
\&        'keywords'      => 'bpm:126 key:a',
\&        'name'          => 'Mission Venice',
\&        'artist'        => 'Nightmares on Wax'
\&    };
.Ve
.Sh "get_cues"
.IX Subsection "get_cues"
Returns the cuepoints marked within the wav file.
.PP
.Vb 1
\&    my $cues = $read \-> get_cues();
.Ve
.PP
Returns a reference to a hash containing;
(for example, a file marked up for use in Audio::Mix)
(position is sample position)
.PP
.Vb 10
\&    {
\&        1 => {
\&            label       => 'sig',
\&            position    => 764343,
\&            note        => 'first'
\&        },
\&        2 => {
\&            label       => 'fade_in',
\&            position    => 1661774,
\&            note        => 'trig'
\&        },
\&        3 => {
\&            label       => 'sig',
\&            position    => 18033735,
\&            note        => 'last'
\&        },
\&        4 => {
\&            label       => 'fade_out',
\&            position    => 17145150,
\&            note        => 'trig'
\&        },
\&        5 => {
\&            label       => 'end',
\&            position    => 18271676
\&        }
\&    }
.Ve
.Sh "read_raw"
.IX Subsection "read_raw"
Reads raw packed bytes from the current audio data position in the file.
.PP
.Vb 1
\&    my $data = $self \-> read_raw( $byte_length );
.Ve
.Sh "read_raw_samples"
.IX Subsection "read_raw_samples"
Reads raw packed samples from the current audio data position in the file.
.PP
.Vb 1
\&    my $data = $self \-> read_raw_samples( $samples );
.Ve
.Sh "read"
.IX Subsection "read"
Returns the current audio data position sample across all channels.
.PP
.Vb 1
\&    my @channels = $self \-> read();
.Ve
.PP
Returns an array of unpacked samples.
Each element is a channel i.e ( left, right ).
The numbers will be in the range;
.PP
.Vb 2
\&    where $samp_max = ( 2 ** bits_per_sample ) / 2
\&    \-$samp_max to +$samp_max
.Ve
.Sh "position"
.IX Subsection "position"
Returns the current audio data position (as byte offset).
.PP
.Vb 1
\&    my $byte_offset = $read \-> position();
.Ve
.Sh "position_samples"
.IX Subsection "position_samples"
Returns the current audio data position (in samples).
.PP
.Vb 1
\&    my $samples = $read \-> position_samples();
.Ve
.Sh "move_to"
.IX Subsection "move_to"
Moves the current audio data position to byte offset.
.PP
.Vb 1
\&    $read \-> move_to( $byte_offset );
.Ve
.Sh "move_to_sample"
.IX Subsection "move_to_sample"
Moves the current audio data position to sample offset.
.PP
.Vb 1
\&    $read \-> move_to_sample( $sample_offset );
.Ve
.Sh "length"
.IX Subsection "length"
Returns the number of bytes of audio data in the file.
.PP
.Vb 1
\&    my $audio_bytes = $read \-> length();
.Ve
.Sh "length_samples"
.IX Subsection "length_samples"
Returns the number of samples of audio data in the file.
.PP
.Vb 1
\&    my $audio_samples = $read \-> length_samples();
.Ve
.Sh "length_seconds"
.IX Subsection "length_seconds"
Returns the number of seconds of audio data in the file.
.PP
.Vb 1
\&    my $audio_seconds = $read \-> length_seconds();
.Ve
.Sh "details"
.IX Subsection "details"
Returns a reference to a hash of lots of details about the file.
Too many to list here, try it with Data::Dumper.....
.PP
.Vb 3
\&    use Data::Dumper;
\&    my $details = $read \-> details();
\&    print Data::Dumper\->Dump([ $details ]);
.Ve
.Sh "reread_length"
.IX Subsection "reread_length"
Rereads the length of the file in case it is being written to
as we are reading it.
.PP
.Vb 1
\&    my $new_data_length = $read \-> reread_length();
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 2
\&    Nick Peskett (see http://www.peskett.co.uk/ for contact details).
\&    Kurt George Gjerde <kurt.gjerde@media.uib.no>. (0.02\-0.03)
.Ve
