#!/usr/bin/perl -w
# ----------------------------------------------------------------------------
# Name:  dra-convert
# Desc:  Convert preservation files into access files
#
# Adam Wead and Travis Gregg
# Jacobs School of Music
# Indiana University
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
#
# Setup libraries and packages
#
# ----------------------------------------------------------------------------

# We have to have an environment variable telling us where the app is
if ( !$ENV{DRA_HOME} ) {
    die "DRA_HOME not set\n";
}

use lib "$ENV{DRA_HOME}/lib";
use DRA;
use strict;
use AppConfig;
use Path::Class;
use IO::CaptureOutput qw(capture qxx qxy);
use Carp;

# ----------------------------------------------------------------------------
#
# Define variables
#
# ----------------------------------------------------------------------------

my $config = AppConfig->new( {
    ERROR    => \&main::error,
    PEDANTIC => 1,
} );

# Define all variables from dra.conf
$config->define( "accessFileList=s"             );
$config->define( "afconvert=s"                  );
$config->define( "afpMount=s"                   );
$config->define( "appUser=s"                    );
$config->define( "appGroup=s"                   );
$config->define( "audioDir=s"                   );
$config->define( "backupBlock=s"                );
$config->define( "backupDir=s"                  );
$config->define( "backupScriptLog=s"            );
$config->define( "bitRate=s"                    );
$config->define( "burnFolder=s"                 );
$config->define( "burnList=s"                   );
$config->define( "chmod=s"                      );
$config->define( "chmodArgs=s"                  );
$config->define( "chmodMode=s"                  );
$config->define( "conversionErrorLog=s"         );
$config->define( "conversionLog=s"              );
$config->define( "copiedLog=s"                  );
$config->define( "copy=s"                       );
$config->define( "delBlock=s"                   );
$config->define( "deleteScriptLog=s"            );
$config->define( "email=s"                      );
$config->define( "errorLog=s"                   );
$config->define( "group=s"                      );
$config->define( "hallList=s"                   );
$config->define( "hsi=s"                        );
$config->define( "hsiOpts=s"                    );
$config->define( "hsiPorts=s"                   );
$config->define( "htar=s"                       );
$config->define( "htarOpts=s"                   );
$config->define( "htarUser=s"                   );
$config->define( "interestedAccessVideoExts=s"  );
$config->define( "interestedPreservVideoExts=s" );
$config->define( "iucat=s"                      );
$config->define( "jira=s"                       );
$config->define( "kdestroy=s"                   );
$config->define( "keytab=s"                     );
$config->define( "kinit=s"                      );
$config->define( "kinitOpts=s"                  );
$config->define( "libraryDirectory=s"           );
$config->define( "libraryServer=s"              );
$config->define( "libraryTemp=s"                );
$config->define( "logDir=s"                     );
$config->define( "mdssBlock=s"                  );
$config->define( "mdssErrorLog=s"               );
$config->define( "mdssExclude=s"                );
$config->define( "mdssList=s"                   );
$config->define( "mdssLog=s"                    );
$config->define( "mdssScriptLog=s"              );
$config->define( "mkdir=s"                      );
$config->define( "mkdirArgs=s"                  );
$config->define( "mount=s"                      );
$config->define( "mountCommand=s"               );
$config->define( "mountPoint=s"                 );
$config->define( "mv=s"                         );
$config->define( "normArgs=s"                   );
$config->define( "normalize=s"                  );
$config->define( "remove=s"                     );
$config->define( "rsync=s"                      );
$config->define( "rsyncArgs=s"                  );
$config->define( "rsyncLog=s"                   );
$config->define( "rsyncTranArgs=s"              );
$config->define( "runLog=s"                     );
$config->define( "sampleRate=s"                 );
$config->define( "semester=s"                   );
$config->define( "sender=s"                     );
$config->define( "sentToBeBurnedLog=s"          );
$config->define( "share=s"                      );
$config->define( "smbPass=s"                    );
$config->define( "smbUser=s"                    );
$config->define( "specificExtsList=s"           );
$config->define( "ssh=s"                        );
$config->define( "sshKey=s"                     );
$config->define( "sshOpts=s"                    );
$config->define( "sshUser=s"                    );
$config->define( "tempDir=s"                    );
$config->define( "touch=s"                      );
$config->define( "transBlock=s"                 );
$config->define( "transScriptLog=s"             );
$config->define( "umount=s"                     );
$config->define( "umountArgs=s"                 );
$config->define( "videoMAC=s"                   );
$config->define( "videoMACMountPoint=s"         );
$config->define( "videoMACVolume=s"             );
$config->define( "videoPass=s"                  );
$config->define( "videoUser=s"                  );

# Command line switches
$config->define( "help!" );

# Pull from config file, then override config file settings with command line
# arguments
my $confFile = Path::Class::File->new( $ENV{DRA_HOME}, "conf", "dra.conf" );
$config->file("$confFile");    # Note: we have to use quotes here
$config->args();

# Initialize only the variables we'll be using
my $conversionLog = $config->get('conversionLog');
my $normalize     = $config->get('normalize');
my $normArgs      = $config->get('normArgs');
my $sampleRate    = $config->get('sampleRate');
my $bitRate       = $config->get('bitRate');
my $temp          = $config->get('tempDir');
my $copy          = $config->get('copy');
my $remove        = $config->get('remove');
my $afconvert     = $config->get('afconvert');

# Show help
if ( $config->get("help") ) {
    main::help();
    exit 0;
}

# Get command arguments
if ( !$ARGV[0] ) {
    main::error("Need a project directory");
}
my $path = Path::Class::Dir->new( $ARGV[0] );
if ( ( !-d $path ) or ( !-e $path ) ) {
    main::error("Invalid project directory");
}

# Build logging path and file
my $logDir = Path::Class::Dir->new( $path, "access", "logs" );
if ( !-e $logDir ) {
    main::error("Log directory for project doesn't exist!");
}
my $logFile = Path::Class::File->new( $logDir, $conversionLog );


# ----------------------------------------------------------------------------
#
# Do some stuff
#
# ----------------------------------------------------------------------------

DRA::logger( "Starting up...", $logFile );

# Calculate gain on all original files
DRA::logger( "Calculating gain for all files under $path", $logFile );

my @peakGains;
my @args = split / /, $normArgs;

my @files = DRA::readDirectory( $path, "wav" );
foreach my $file (@files) {

    my $fullPath = Path::Class::File->new( $path, $file );
    DRA::logger( "Processing $fullPath", $logFile );
    push( @args, $fullPath );
    my $result = DRA::runCommand( $normalize, @args );
    DRA::logger( "Results: $result", $logFile );

    my @lines = split( /\n/, $result );
    foreach my $line (@lines) {
        my @parts = split( /dBFS\ /, $line );
        push( @peakGains, abs( $parts[1] ) );
    }

}

# Pick the highest peak across all the files
@peakGains = sort (@peakGains);
my $highestPeak = $peakGains[0];
my $gainToApply = abs($highestPeak);

DRA::logger( "Gain to apply = $gainToApply", $logFile );

# Apply gain and convert each file
foreach my $file (@files) {

    # Setup filenames
    my $newAccessFileName = DRA::getAccessName( $file, $bitRate, $sampleRate );
    DRA::logger( "Getting access filename: $newAccessFileName", $logFile );
    my $tempFile = Path::Class::File->new( $temp, $file );
    my $srcFile  = Path::Class::File->new( $path, $file );
    my $accessFile =
      Path::Class::File->new( $path, "access", $newAccessFileName );
    my $accessTemp = Path::Class::File->new( $temp, $newAccessFileName );

    # Copy file to temp location for gain adjustment first
    DRA::logger( "Copying $srcFile to temp file $tempFile", $logFile );
    system( $copy, $srcFile, $tempFile ) == 0 or croak "Copy command failed\n";

    # Apply gain, if needed
    if ( $gainToApply == 0 ) {
        DRA::logger( "No gain change needed", $logFile );
    }
    else {
        my $gainArg = $gainToApply . "dB";
        DRA::logger( "Applying gain of $gainArg to $tempFile", $logFile );
        my @args = ( "--quiet", "--clipping", "--gain", $gainArg, $tempFile );
        my $result = DRA::runCommand( $normalize, @args );

        # Report normalize results, if any
        DRA::logger( "Normalize command succeeded", $logFile );
        if ($result) {
            DRA::logger( "Results reported: $result", $logFile );
        }
        else {
            DRA::logger( "No output reported (OK)", $logFile );
        }
        DRA::logger( "Gain adjustment complete", $logFile );
    }

    # Convert file to our temporary access file with specified sample rate bit
    # depth
    #
    # NOTE:
    # afpconvert command will not fork properly, so we have to invoke the
    # shell.  With no verbose option, there should be no output unless there's
    # an error stderr is redirected to stdout, any output is considered
    # failure and program will croak
    DRA::logger( "Converting $file to $bitRate @ $sampleRate", $logFile );
    my $leiArg = "LEI" . $bitRate . "@" . $sampleRate;
    my @args   = (
        "-f", "\"WAVE\"", "-d", $leiArg, "-r", 127, "--src-complexity", "bats",
        $tempFile, $accessTemp
    );
    my $command = $afconvert . " " . join( " ", @args ) . " 2>&1";
    my $result = `$command`;
    if ($result) {
        my $message = "Caught errors with convert command: $command \n "
          . "Results were: $result";
        croak $message;
    }
    DRA::logger( "Conversion complete", $logFile );

    # afconvert does not preserve wave header info from the original to
    # converted file so we will grab the header info from the original, modify
    # it and rewrite our final access file with the new header info and temp
    # file audio data
    my $cueCount;

    # Get metadata from newly converted file
    my $SRCwav        = new Audio::Wav;
    my $SRCRead       = $SRCwav->read($accessTemp);
    my $SRCDetails    = $SRCRead->details();
    my $SRCSamplerate = $SRCDetails->{'sample_rate'};
    my $SRCBitDept    = $SRCDetails->{'bits_sample'};
    my $SRCData       = Data::Dumper->Dump( [$SRCDetails] );

    # Get metadata from original file
    my $origWav        = Audio::Wav->new();
    my $origRead       = $origWav->read($srcFile);
    my $origDetails    = $origRead->details();
    my $origSamplerate = $origDetails->{'sample_rate'};
    my $origBitDept    = $origDetails->{'bits_sample'};
    my $origData       = Data::Dumper->Dump( [$origDetails] );

    # Log results and compute coeffienct rate change
    my $m1 = "Original BitDeph-SampleRate is $origBitDept $origSamplerate";
    my $m2 = "Temp access file BitDepth and SampleRate is "
      . "$SRCBitDept $SRCSamplerate";
    my $coefRateChange = ( $SRCSamplerate / $origSamplerate );
    DRA::logger( $m1,                                   $logFile );
    DRA::logger( $m2,                                   $logFile );
    DRA::logger( "Original Metadata: $origData",        $logFile );
    DRA::logger( "Temp Metadata: $SRCData",             $logFile );
    DRA::logger( "Coef Rate Change is $coefRateChange", $logFile );

    # edit header information
    $origDetails->{'bits_sample'}  = $SRCBitDept;
    $origDetails->{'sample_rate'}  = $SRCSamplerate;
    $origDetails->{'data_length'}  = $SRCDetails->{'data_length'};
    $origDetails->{'data_finish'}  = $SRCDetails->{'data_finish'};
    $origDetails->{'length'}       = $SRCDetails->{'length'};
    $origDetails->{'block_align'}  = $SRCDetails->{'block_align'};
    $origDetails->{'total_length'} = $SRCDetails->{'total_length'};
    $origDetails->{'bytes_sec'}    = $SRCDetails->{'bytes_sec'};

    while ( my ( $chunkTitle, $chunkData ) = each(%$origDetails) ) {

        if ( $chunkTitle =~ "cue" ) {

            while ( my ( $cueNumber, $cueData ) = each(%$chunkData) ) {
                DRA::logger( "Cue Point is $cueNumber", $logFile );

                # first cue should always be at 0
                if ( $cueNumber eq "1" ) {
                    while ( my ( $cueDataTitle, $cueDataPosition ) =
                        each(%$cueData) )
                    {
                        if (   ( $cueDataTitle =~ "position" )
                            or ( $cueDataTitle =~ "offset" ) )
                        {
                            DRA::logger(
                                "Cue 1 $cueDataTitle is $cueDataPosition",
                                $logFile );
                            if ( $cueDataPosition != "0" ) {
                                my $m1 =
                                  $origDetails->{cue}->{$cueNumber}
                                  ->{$cueDataTitle} . " shoud be 0";
                                my $m2 = "Cue $cueDataTitle was at "
                                  . "$cueDataPosition but corrected to 0";
                                DRA::logger( $m1, $logFile );
                                DRA::logger( $m2, $logFile );
                                $origDetails->{cue}->{$cueNumber}
                                  ->{$cueDataTitle} = "0";
                            }
                        }
                    }
                }

                # correct the rest of the cue markings
                while ( my ( $cueDataTitle, $cueDataPosition ) =
                    each(%$cueData) )
                {
                    if (   ( $cueDataTitle =~ "position" )
                        or ( $cueDataTitle =~ "offset" ) )
                    {
                        my $m1 = "Orig $cueDataTitle is $cueDataPosition";
                        DRA::logger( $m1, $logFile );
                        my $SRCposition =
                          int( $cueDataPosition * $coefRateChange );
                        my $m2 =
                          $origDetails->{cue}->{$cueNumber}->{$cueDataTitle}
                          . " becomes $SRCposition";
                        DRA::logger( $m2, $logFile );
                        $origDetails->{cue}->{$cueNumber}->{$cueDataTitle} =
                          $SRCposition;
                        my $m3 = "New $cueDataTitle is "
                          . $origDetails->{cue}->{$cueNumber}->{$cueDataTitle};
                        DRA::logger( $m3, $logFile );
                    }
                }

            }

        }

    }

    $cueCount++;

    # Write the new wave file using the audio data from the temp file
    # and header data from our corrected metadata
    DRA::logger( "Writing new file with metadata...", $logFile );
    my $SRCwavMeta = new Audio::Wav;
    my $write = $SRCwavMeta->write( $accessFile, $origDetails );
    my $data;
    while ( defined( $data = $SRCRead->read_raw(512) ) ) {
        $write->write_raw($data);
    }
    $write->finish();
    DRA::logger( "Complete", $logFile );

    # Check file
    DRA::logger( "Checking results of the conversion...", $logFile );
    my $results = DRA::checkConversion(
        {
            file    => $accessFile,
            samples => $sampleRate,
            bits    => $bitRate,
        }
    );
    if ($results) {
        DRA::logger( "Failed!", $logFile );
        my $message = "File failed final check:\n " . $results;
        croak $message;
    }
    else {
        DRA::logger( "Passed", $logFile );
    }

    # Report on results
    my $SRCDoneWav     = Audio::Wav->new();
    my $SRCDoneRead    = $SRCDoneWav->read($accessFile);
    my $SRCDoneDetails = $SRCDoneRead->details();
    my $SRCDoneData    = Data::Dumper->Dump( [$SRCDoneDetails] );
    DRA::logger( "Sample Rate Converted Metadata: $SRCDoneData", $logFile );

    # Cleanup
    DRA::logger( "Removing temp files...", $logFile );
    system( $remove, "-f", $tempFile ) == 0 or croak "Remove command failed\n";
    system( $remove, "-f", $accessTemp ) == 0
      or croak "Remove command failed\n";
    DRA::logger( "Conversion complete for $file", $logFile );

}

DRA::logger( "Finished processing all files under $path", $logFile );
exit 0;

# ----------------------------------------------------------------------------
# 
# Subroutines
#
# ----------------------------------------------------------------------------

# -------------------------------------------------------------------
# Name: error, help
# Desc: Just an error and help routine...nothing to see here...
#       move along...
# -------------------------------------------------------------------

sub error {
    my $message = shift;
    
    if ($message) {
        print $message . "\n";
    }
    else {
        print "Invalid option\n";
        &main::help;
    }
    
    exit 1;
}


sub help {
    print "Usage: dra-convert [-help] [dra.conf options] [project_directory] \n";
}

__END__


=head1 DRA-CONVERT

dra-convert - Converts preservation audio files to access format

=head1 VERSION

This documentation refers to dra-convert version 2.0.

=head1 USAGE

B<dra-convert [-help] [dra.conf options] [project_directory]>

=head1 REQUIRED ARGUMENTS

A B<project directory> is required for the script to run. This must be the full
path the directory.  For example:

B<dra-convert /Volumes/audio/Concerts/2010_fall/20100923vab1234>

=head1 OPTIONS

B<-help> Displays brief synopsis of usage.

B<dra.conf> Any setting from the dra.conf file may be passed to the script at runtime in the format:

-[variable name] [value]

Example:

B<dra-mdss -email joebob@indiana.edu [directory]>

Will execute the script overriding the email address specified in dra.conf with joebob@indiana.edu.
Generally, this script is called during the dra-transfer script, so passing
options to this script is not needed.  However, one may call this script
individually if needed.

=head1 DESCRIPTION

The dra-convert script locates all the wave files found in the project directory
and converts them from 24/96 to 16/44 resolution.  During this process, it also
computes gain across all the files and applies the correct amount of
normalization to each file.

Temporary files are written somewhere else other than the project directory so
that once complete, the newly created access files will be copied over the to
access directory of the project directory. If there is any failure along the
way, temp files are removed and process can repeat itself until there is a
successful outcome.

The script will attempt to convert all audio files until there is success. This
is determined by the absence of an error log under the project's log directory
and the presence of conversion log as well.

=head1 DIAGNOSTICS

Upon successful execution, the application with exit with no output. Any fatal
error will be written to standard output and the application ceases immediately.
Messages are written to the application's own log file found in the applications
log directory, as well as a separate log file found in the project's log
directory.

In the case of errors written to standard out, the error will appear on the
command line shell or will be collected by the calling script, usually
dra-transfer. The presence of any fatal error will cause the script to write an
error log to the project log directory found in the access folder of the
project. The presence of this file will mean the conversion will be repeated
again if the script is called.

=head1 CONFIGURATION AND ENVIRONMENT

A properly configured dra.conf file should be sufficient for the dra-convert
script to run.

The DRA_HOME environment variable is required and can be set on a per-user basis
or at execution time.

=head1 DEPENDENCIES

This script requires the Apple program B<afconvert> as well as the third party
software program B<normalize>.  Afconvert should come with every OSX
installation and normalize is available for free via GPL. Generally, it should
be installed to /usr/local/bin but it can be installed anywhere so long as its
location is given in dra.conf.

=head1 AUTHOR

Adam Wead     awead@indiana.edu, amsterdamos@gmail.com

Travis Gregg  

=head1 LICENCE AND COPYRIGHT

Copyright 2010, the Trustees of Indiana University.

=cut

