#!/usr/bin/perl -w
# ----------------------------------------------------------------------------
# Name:  dra-video-run
# Desc:  Processes a set of project directories
# Args:  none
#
# Adam Wead
# Jacobs School of Music
# Indiana University
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
#
# Setup libraries and packages
#
# ----------------------------------------------------------------------------

# We have to have an environment variable telling us where the app is
if ( !$ENV{DRA_HOME} ) {
    die "DRA_HOME not set\n";
}

use lib "$ENV{DRA_HOME}/lib";
use DRA;
use strict;
use AppConfig;
use Path::Class;
use IO::CaptureOutput qw(capture qxx qxy);
use Carp;
use Storable;

# ----------------------------------------------------------------------------
#
# Define application-wide variables
#
# ----------------------------------------------------------------------------

my $config = AppConfig->new( {
    ERROR    => \&main::error,
    PEDANTIC => 1,
} );

# Define all video.conf variables
$config->define( "audioDir=s" );
$config->define( "conversionErrorLog=s" );
$config->define( "conversionLog=s" );
$config->define( "copiedLog=s" );
$config->define( "appUser=s" );
$config->define( "appGroup=s" );
$config->define( "draKey=s" );
$config->define( "draServer=s" );
$config->define( "draUser=s" );
$config->define( "errorLog=s" );
$config->define( "hallList=s" );
$config->define( "hsi=s" );
$config->define( "hsiOpts=s" );
$config->define( "hsiPorts=s" );
$config->define( "htar=s" );
$config->define( "htarOpts=s" );
$config->define( "htarUser=s" );
$config->define( "keytab=s" );
$config->define( "logDir=s" );
$config->define( "mdssErrorLog=s" );
$config->define( "mdssLog=s" );
$config->define( "remoteBlock=s" );
$config->define( "localBlock=s" );
$config->define( "rsyncLog=s" );
$config->define( "semester=s" );
$config->define( "sentToBeBurnedLog=s" );
$config->define( "sshOpts=s" );
$config->define( "tempDir=s" );
$config->define( "videoDirs=s" );
$config->define( "videoErrorLog=s" );
$config->define( "videoTransLog=s" );
$config->define( "videoLog=s" );
$config->define( "videoTypeList=s" );

# Command line switches
$config->define("f!");
$config->define("help!");

# Read in variables from our config file and override any options passed from
# the comand line
my $confFile = Path::Class::File->new( $ENV{DRA_HOME}, "conf", "video.conf" );
if ( !-e $confFile ) {
    die "video.conf config file not found!";
}
$config->file("$confFile");
$config->args();

# Initialize only the variables we'll be using here
my $videoLog           = $config->get( "videoLog"      );
my $logDir             = $config->get( "logDir"        );
my $videoDirs          = $config->get( "videoDirs"     );
my $blockList          = $config->get( "localBlock"    );
my $user               = $config->get( "appUser"       );
my $group              = $config->get( "appGroup"      );

# Initialize command line switches
my $force        = $config->get("f");

# Show help
if ( $config->get("help") ) {
    main::help();
    exit 0;
}

# Check our local block list
my $run = DRA::checkBlocks($blockList);
if ($run) {
    croak($run);
}

# ----------------------------------------------------------------------------
#
# Do some stuff
#
# ----------------------------------------------------------------------------

my $bin      = Path::Class::Dir->new( $ENV{DRA_HOME}, "bin" );
my $logFile  = Path::Class::File->new( $logDir, $videoLog );

my %errors;

DRA::logger("dra-video-run starting...", $logFile);

# Gather list of directories
my @sourceDirs;
my @sources = split / /, $videoDirs;
foreach my $source (@sources) {
    my @dirs = DRA::readDirectory($source);
    foreach my $dir (@dirs) {
        if ( $dir =~ /^20/ and $dir =~ /^\d{8,8}/) {
            my $path = Path::Class::Dir->new($source, $dir);
            push @sourceDirs, $path;
        }
    }
}

# Run dra-video on a set of directories
foreach my $projectDir (@sourceDirs) {
    DRA::logger("Processing video project -- $projectDir", $logFile);

    my $transferCommand = Path::Class::File->new( $bin, "dra-video" );
    my ($t_out, $t_err, $t_success, $t_exit_code) =
        IO::CaptureOutput::capture_exec($transferCommand, $projectDir);

    if ( $t_err or $t_out ) {
        DRA::logger("...script FAILED. Skipping to next folder", $logFile);
        my $message
            = "dra-video output: " . $t_out . "\n\n"
            . "dra-video errors: " . $t_err . "\n\n"
            ;
        $errors{$projectDir} = $message;
        next;
    }
    else {
        DRA::logger("...ok", $logFile);;
    }

}

# Change permissions on project directories
#DRA::logger("Setting permissions on each project directory", $logFile);
#foreach my $projectDir (@sourceDirs) {
#    DRA::setPermissions($projectDir,$user,$group);
#}

# Report any errors to stdout
if (%errors) {

    DRA::logger("DRA video run complete, but with errors", $logFile);
    print "dra-video-run finished with the following errors:\n\n";

    foreach my $error ( keys %errors ) {
        print $error . ":\n" . $errors{$error};
    }
}
else {
    DRA::logger("DRA video run complete with no errors.", $logFile);
}

exit 0;


# ----------------------------------------------------------------------------
#
# Subroutines
#
# ----------------------------------------------------------------------------

# -------------------------------------------------------------------
# Name: error, help
# Desc: Just an error and help routine...nothing to see here...
#       move along...
# -------------------------------------------------------------------

sub error {
    my $message = shift;

    if ($message) {
        print $message . "\n";
    }
    else {
        print "Invalid option\n";
        &main::help;
    }

    exit 1;
}

sub help {
    print "Usage: dra-video-run [-help] [video.conf options] \n";
}


__END__

=head1 DRA-VIDEO-RUN

dra-video-run - Executes dra-video on multiple project directories

=head1 VERSION

This documentation refers to dra-video version 2.1

=head1 USAGE

B<dra-video-run [-help] [-f] [video.conf options]>

=head1 REQUIRED ARGUMENTS

None

=head1 OPTIONS

B<-help> Displays brief synopsis of usage.

B<video.conf> Any setting from the video.conf file may be passed to the script
at runtime in the format:

-[variable name] [value]

Example:

B<dra-video-run -email joebob@indiana.edu [directory]>

Will execute the script overriding the email address specified in video.conf
with joebob@indiana.edu

=head1 DESCRIPTION

This script gathers a list of project directories under one or more parent
directories listed in the video.conf file.  dra-video-run then calls dra-video
on each of these projects directories individually and reports on the outcome
of each one at the completion of the script.

The script has its audio counterpart in dra-run, except that dra-video-run is
simpler and no additional procedures are performed other than executing
dra-video on each project directory. Like dra-run, dra-notify is used in
conjunction with dra-video-run to email the results of processed project
directories to individuals specified in the dra.conf file.

=head1 DIAGNOSTICS

See the documentation for dra-video under this section.

=head1 CONFIGURATION AND ENVIRONMENT

One important difference between this script and other run scripts in the 
DRA application, is that dra-video-run should be executed by the user with
the same rights to the folders and files, not the root user.  The dra-run
script, for example, was designed to be run by root, whereas dra-video-run
was not.  This only makes a difference when determining how the plist
file should be used under launchd.

For more information, see the manual pages for launchd and 
the documentation for dra-video under this section.

=head1 DEPENDENCIES

See the documentation for dra-video under this section.

=head1 AUTHOR

Adam Wead     awead@indiana.edu, amsterdamos@gmail.com

=head1 LICENCE AND COPYRIGHT

Copyright 2012, the Trustees of Indiana University.

=cut
