#!/usr/bin/perl -w
# ----------------------------------------------------------------------------
# Name:  dra-video
# Desc:  Sends a video project to the dra server and mdss
# Args:  Project folder
#
# Adam Wead
# Jacobs School of Music
# Indiana University
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
#
# Setup libraries and packages
#
# ----------------------------------------------------------------------------

# We have to have an environment variable telling us where the app is
if ( !$ENV{DRA_HOME} ) {
    die "DRA_HOME not set\n";
}

use lib "$ENV{DRA_HOME}/lib";
use DRA;
use strict;
use AppConfig;
use Path::Class;
use IO::CaptureOutput qw(capture qxx qxy);
use Carp;
use Storable;

# ----------------------------------------------------------------------------
#
# Define application-wide variables
#
# ----------------------------------------------------------------------------

my $config = AppConfig->new( {
    ERROR    => \&main::error,
    PEDANTIC => 1,
} );

# Define all video.conf variables
$config->define( "audioDir=s" );
$config->define( "conversionErrorLog=s" );
$config->define( "conversionLog=s" );
$config->define( "copiedLog=s" );
$config->define( "appUser=s" );
$config->define( "appGroup=s" );
$config->define( "draKey=s" );
$config->define( "draServer=s" );
$config->define( "draUser=s" );
$config->define( "errorLog=s" );
$config->define( "hallList=s" );
$config->define( "hsi=s" );
$config->define( "hsiOpts=s" );
$config->define( "hsiPorts=s" );
$config->define( "htar=s" );
$config->define( "htarOpts=s" );
$config->define( "htarUser=s" );
$config->define( "keytab=s" );
$config->define( "logDir=s" );
$config->define( "mdssErrorLog=s" );
$config->define( "mdssLog=s" );
$config->define( "remoteBlock=s" );
$config->define( "rsyncLog=s" );
$config->define( "semester=s" );
$config->define( "sentToBeBurnedLog=s" );
$config->define( "sshOpts=s" );
$config->define( "tempDir=s" );
$config->define( "videoDirs=s" );
$config->define( "videoErrorLog=s" );
$config->define( "videoTransLog=s" );
$config->define( "videoLog=s" );
$config->define( "videoTypeList=s" );
$config->define( "localBlock=s" );

# Command line switches
$config->define("f!");
$config->define("help!");

# Read in variables from our config file and override any options passed from
# the comand line
my $confFile = Path::Class::File->new( $ENV{DRA_HOME}, "conf", "video.conf" );
if ( !-e $confFile ) {
    die "video.conf config file not found!";
}
$config->file("$confFile");
$config->args();

# Initialize only the variables we'll be using here
my $draServer          = $config->get( "draServer"     );
my $draUser            = $config->get( "draUser"       );
my $draKey             = $config->get( "draKey"        );
my $audioDir           = $config->get( "audioDir"      );
my $semester           = $config->get( "semester"      );
my $remoteBlockList    = $config->get( "remoteBlock"   );
my $remoteErrorLog     = $config->get( "errorLog"      );
my $remoteTransferLog  = $config->get( "copiedLog"     );
my $remoteMdssLog      = $config->get( "mdssLog"       );
my $remoteMdssErrorLog = $config->get( "mdssErrorLog"  );
my $videoLog           = $config->get( "videoLog"      );
my $videoErrorLog      = $config->get( "videoErrorLog" );
my $videoTransLog      = $config->get( "videoTransLog" );
my $logDir             = $config->get( "logDir"        );
my $hallList           = $config->get( "hallList"      );
my $sshOpts            = $config->get( "sshOpts"       );
my $hsi                = $config->get( "hsi"           );
my $hsiOptLine         = $config->get( "hsiOpts"       );
my $hsiPorts           = $config->get( "hsiPorts"      );
my $htar               = $config->get( "htar"          );
my $htarOptLine        = $config->get( "htarOpts"      );
my $htarUser           = $config->get( "htarUser"      );
my $keytab             = $config->get( "keytab"        );
my $tempDir            = $config->get( "tempDir"       );
my $videoTypeList      = $config->get( "videoTypeList" );

# Initialize command line switches
my $force        = $config->get("f");

# Show help
if ( $config->get("help") ) {
    main::help();
    exit 0;
}

# Check input
if (! $ARGV[0]) {
    main::error("No folder specified");
}
my $projectDir = Path::Class::Dir->new($ARGV[0]);
if (! -d $projectDir) {
    main::error("Specified folder does not exist");
}

# Check our local block list
#my $run = DRA::checkBlocks($blockList);
#if ($run) {
#    croak($run);
#}


# ----------------------------------------------------------------------------
#
# Do some stuff
#
# ----------------------------------------------------------------------------

# Build paths to local files and folders
my $localAccessDir   = Path::Class::Dir->new($projectDir, "access" );
my $projectLogDir    = Path::Class::Dir->new($projectDir, "access", "logs" );

my $sshKeyPath       = Path::Class::File->new($ENV{DRA_HOME}, "conf", $draKey);
my $projectLogPath   = Path::Class::File->new($projectLogDir, $videoTransLog );
my $errorLogPath     = Path::Class::File->new($projectLogDir, $videoErrorLog );
my $videoLogPath     = Path::Class::File->new($logDir, $videoLog);

my $keytabFile
    = Path::Class::File->new( $ENV{DRA_HOME}, "conf", $keytab );


DRA::logger("dra-video processing $projectDir", $videoLogPath);

# Exit conditions - when the script will stop
unless ($force) {
    # No access directory? This is manually created to indicate the project is
    # ready
    if (! -e $localAccessDir) {
        DRA::logger("No access directory found; exiting.", $videoLogPath);
        exit 0;
    }
    # Process log and no error log means it worked
    if ( (-e $projectLogPath) and (! -e $errorLogPath) ) {
        DRA::logger(
            "Video project was successfully processed at an earlier time",
            $videoLogPath
        );
        exit 0;
    }
}

# Create a log directory
if (! -e $projectLogDir) {
    system("mkdir", $projectLogDir) == 0
        or croak "Failed to created log directory: $!\n";
}

# Delete error log, if it exists and initialize error array
if (-e $errorLogPath) {
    system("rm", $errorLogPath) == 0
        or croak "Failed to remove error log: $!\n";
}
my @errors;

# Check for a well-formed project directory
DRA::logger( "Checking project directory ...", $videoLogPath );
my ( $datedDir, $hallEmail, $varID, $mdssPrefix, $errMsg ) =
  DRA::checkProjectDir( $projectDir, $hallList );
if ($errMsg) {
    push @errors, $errMsg;
}

&main::evaluateErrors;
DRA::logger( "OK", $videoLogPath );

DRA::logger( "Checking file names ...", $videoLogPath );
# Check project directory contents
my $pderr
    = DRA::checkVideoDirectoryContents($projectDir, $varID, $videoTypeList);
if ($pderr) {
    push @errors, $pderr;
}

&main::evaluateErrors;
DRA::logger( "OK", $videoLogPath );

# Build paths to remote files on DRA server
my $remoteProjectDir = Path::Class::Dir->new($audioDir, $semester, $datedDir);
my $remoteAccessDir  = Path::Class::Dir->new($remoteProjectDir, "access" );
my $remoteLogDir
    = Path::Class::Dir->new($remoteProjectDir, "access", "logs" );

# Check block list on remote server
my $checkCommand = "ps -ax";
my $runningProcs = main::remoteCommand($checkCommand);
my @blocks = split / /, $remoteBlockList;
my @remoteProcs;
foreach my $block (@blocks) {
    if ($runningProcs =~ /$block/) {
        push @remoteProcs, $block;
    }
}
if (@remoteProcs) {
    my $list = join ", ", @remoteProcs;
    my $message
        = "The following blocking processed were detected on the "
        . "remote system: " . $list . " -- "
        . "Script will terminate now."
        ;
    DRA::logger($message, $videoLogPath);
    exit 0;
}

# Write out list of video files to be included in the marc record
#
# Names of each file will reflect the new names they will have after they are
# renamed later in this script.
DRA::logger("Checking for local video file list", $videoLogPath);
my $listName = $varID . "_MDSSVideoFileNames.txt";
my $listPath = Path::Class::File->new( $projectLogDir, $listName );
if ( (-e $listPath ) and (! $force) ) {
    DRA::logger("...it's there; moving on", $videoLogPath );
}
else {
    DRA::logger(
        "...it's not there; creating video file list",
        $videoLogPath
    );
    my @videoContents = DRA::readDirectory($projectDir);
    my @videoFiles;
    foreach my $f (@videoContents) {
        my $test = Path::Class::File->new($projectDir, $f);
        unless ( ($f =~ /^access$/) or ($f =~ /md5$/) ) {
            my $newName;
            if (-f $test) {
                if ($f =~ /^jsom/) {
                    $newName = $f;
                }
                else {
                    $newName = $mdssPrefix . "_" . $f;
                }
            }
            else {
                if ($f =~ /^jsom/) {
                    $newName = $f . ".tar";
                }
                else {
                    $newName = $mdssPrefix . "_" . $f . ".tar";
                }
            }
            push @videoFiles, $newName;
        }
    }
    my $videoFileList = join "; ", @videoFiles;
    my $list
        = "Video files stored on MDSS in \"audiopro\" account: "
        . $videoFileList
        . "\n\n";
    DRA::logger(
        "...writting video file list to local project directory",
        $videoLogPath
    );
    DRA::writer( $list, $listPath );

}

# Send video filename list
DRA::logger(
    "Checking to see if the video list is on the remote server",
    $videoLogPath
);
my $remoteListFile = Path::Class::File->new($remoteLogDir, $listName);
if ( (main::remoteFileExists($listName)) and (! $force) ) {
    DRA::logger("...it is; moving on", $videoLogPath);
}
else {
    if ($force) {
        DRA::logger("...force option! Sending to server", $videoLogPath);
    }
    else {
        DRA::logger("...it's not; sending list to server", $videoLogPath);
    }
    my $err = DRA::sendSCP(
        {
            user   => $draUser,
            key    => $sshKeyPath,
            opts   => $sshOpts,
            source => $listPath,
            dest   => $remoteListFile,
            host   => $draServer,
        }
    );

    if ($err) {
        DRA::logger(
            "File list copy failed -- see error log",
            $videoLogPath
        );
        push @errors, $err;
    }

    &main::evaluateErrors;
}


# Log in to DRA server and determine status of project
#
# Script will not continue until the project has been completely transferred
# to MDSS.  If there is any error log, the script will stop at this point.
# Once both the Variations and MDSS transfer is complete, this script will
# transfer the additional video files.
DRA::logger("Logging into remote server ...", $videoLogPath);
DRA::logger("Checking project directory: $remoteProjectDir", $videoLogPath);
DRA::logger("...checking logs under remote project directory", $videoLogPath);
if ((! main::remoteFileExists($remoteMdssLog)) or
    (main::remoteFileExists($remoteMdssErrorLog)) or
    (! main::remoteFileExists($remoteTransferLog)) or
    (main::remoteFileExists($remoteErrorLog))) {

    my $message
        = "The audio portion of the concert has either not been successfully "
        . "transferred to Variations or MDSS yet."
        ;
    DRA::logger($message, $videoLogPath);
    exit 0;
}

# Okay, we're good to go...
DRA::logger("Remote project is ready for video data", $videoLogPath);
DRA::logger("Renaming files under the local project directory", $videoLogPath);
my @videoContents = DRA::readDirectory($projectDir);
my $renameCount = 0;
foreach my $oldname (@videoContents) {
    unless ( ($oldname =~ /^access$/) or ($oldname =~ /^jsom/) ) {
        my $newname = $mdssPrefix . "_" . $oldname;
        my $oldPath = Path::Class::File->new($projectDir, $oldname);
        my $newPath = Path::Class::File->new($projectDir, $newname);
        my @args = ($oldPath, $newPath);
        system("mv", @args) == 0 or
            croak "Failed to rename files in project directory";
        $renameCount++;
    }
}
DRA::logger("...renamed $renameCount file(s)", $videoLogPath);


# Begin sending all the files.  Make a note in the script-wide log,
# then start logging to the project log
DRA::logger("Sending files to DRA server and MDSS...", $videoLogPath);
DRA::logger("Copying DVD files to remote DRA server", $projectLogPath);
my @dvdFiles = DRA::readDirectory($projectDir, "img");
foreach my $dvd (@dvdFiles) {

    my $remoteDvd
        = Path::Class::File->new($remoteProjectDir, "access", $dvd);

    # Use placeholder file to catch interrupted transfers
    my $placeHolder = "PLACEHOLDER: sending file via scp";
    DRA::logger($placeHolder, $errorLogPath);

    my $source = Path::Class::File->new($projectDir, $dvd);
    my $err = DRA::sendSCP(
        {
            user   => $draUser,
            key    => $sshKeyPath,
            opts   => $sshOpts,
            source => $source,
            dest   => $remoteDvd,
            host   => $draServer,
        }
    );

    if ($err) {
        DRA::logger(
            "DVD file copy failed -- see error log",
            $projectLogPath
        );
        push @errors, $err;
    }

    DRA::logger("Computing md5 sums", $projectLogPath);
    my ($md5, $md5err) = DRA::createMD5($source,$dvd);
    if ($md5err) {
        DRA::logger(
            "MD5 creation failed -- see error log",
            $projectLogPath
        );
        push @errors, $md5err;
    }

    DRA::logger("Checking md5 sums for $dvd ...", $projectLogPath);
    my $md5Path = Path::Class::File->new($projectDir, $md5);
    my $md5sum = DRA::getMD5($md5Path);
    my $remoteMd5Command = "md5 -q " . $remoteDvd;
    my $remoteMd5 = main::remoteCommand($remoteMd5Command);
    if ($md5sum eq $remoteMd5) {
        my $message
            = "sums are the same - check passed";
        DRA::logger($message, $projectLogPath);
    }
    else {
        my $message
            = "sums differ - check failed. Removing remote file";
        my $removeDvd = "rm -f $remoteDvd";
        main:remoteCommand($removeDvd);
        DRA::logger($message, $projectLogPath);
        push @errors, $message;
    }

    DRA::logger("... done, removing placholder file", $projectLogPath);
    DRA::clearLog($errorLogPath);

}

# Check transfer of DVD files to audio server
&main::evaluateErrors;

# If it gets this far, it's time to send the files to mdss
# Send individual files to mdss via hsi and folders via htar
# Grab a new list of files since they've been renamed
@videoContents = DRA::readDirectory($projectDir);
my @videoFiles;
my @videoDirs;
foreach my $name (@videoContents) {
    my $test = Path::Class::File->new($projectDir, $name);
    unless ( ($name =~ /^access$/) or ($name =~ /md5$/) ) {
        if (-f $test) {
            push @videoFiles, $name;
        }
        else {
            push @videoDirs, $name;
        }
    }
}

DRA::logger("Sending individual files to MDSS:", $projectLogPath);
my $remoteMdssDir = Path::Class::Dir->new($semester, $datedDir);
foreach my $file (@videoFiles) {

    # Assume hsi will fail -- this catches incomplete transfers
    my $placeHolder = "PLACEHOLDER: sending file via hsi";
    DRA::logger($placeHolder, $errorLogPath);

    DRA::logger("... sending via hsi: $file", $projectLogPath);
    my $error = main::sendFiles($projectDir, $remoteMdssDir, $file);
    if ($error) {
        push @errors, $error;
    }
    DRA::logger("... done, removing placholder file", $projectLogPath);
    DRA::clearLog($errorLogPath);
}

# Check transfer of files to mdss
&main::evaluateErrors;

# Send directories to MDSS via htar
DRA::logger("Sending directories via htar:", $projectLogPath);
foreach my $name (@videoDirs) {
    # Safety check: make sure we don't tranfer empty directories. We could
    # be accidentally tranferring a directory that already was
    # transferred.  Htar removes the contents after a transfer.
    # Retransfering an empty directory overrites the exising archive with
    # an empty one. Not cool...
    my $src = Path::Class::Dir->new($projectDir, $name);
    my @contents = DRA::readDirectory($src);
    if (@contents) {

        # Assume htar will fail.
        # We create a mdss_error.log file first, and delete it upon
        # success.
        my $placeHolder = "PLACEHOLDER: running htar send";
        DRA::logger($placeHolder, $errorLogPath);

        my $remoteName = $name . ".tar";
        my $remotePath = Path::Class::File->new($remoteMdssDir, $remoteName);
        my ($error, $htarMessage) = DRA::htarSend(
            {
            src       => $name,
            parent    => $projectDir,
            dest      => $remotePath,
            htar      => $htar,
            htarOpts  => $htarOptLine,
            keytab    => $keytabFile,
            user      => $htarUser,
            ports     => $hsiPorts,
            }
        );
        if ($error) {
            DRA::logger("Failed! Check MDSS error log", $projectLogPath);
            push @errors, $htarMessage;
        }
        else {
            my $message
                = "Htar appeared to succeed. Removing placeholder file.\n"
                . $htarMessage
                . "\n";
            DRA::logger($message, $projectLogPath);
            DRA::clearLog($errorLogPath);
        }
    }
    else {
        my $message
            = "Directory $name is empty indicating that it was "
            . "probably transferred at an earlier time. HTAR will "
            . "not archive its contents";
        DRA::logger($message, $projectLogPath);
    }
}

# Check transfer of directories to mdss
&main::evaluateErrors;

# Send copy of video.log to audio server
DRA::logger(
    "All file transfers complete, sending copy of video log to remote server",
    $videoLogPath
);
DRA::logger("dra-video finished.", $projectLogPath);
my $remoteVideoLog = Path::Class::File->new($remoteLogDir, $videoTransLog);
my $err = DRA::sendSCP(
    {
        user   => $draUser,
        key    => $sshKeyPath,
        opts   => $sshOpts,
        source => $projectLogPath,
        dest   => $remoteVideoLog,
        host   => $draServer,
    }
);

if ($err) {
    DRA::logger(
        "Failed to copy video log to remote server",
        $projectLogPath
    );
    push @errors, $err;
}

&main::evaluateErrors;

DRA::logger( "Done!", $videoLogPath);



# ----------------------------------------------------------------------------
#
# Subroutines
#
# ----------------------------------------------------------------------------


# ----------------------------------------------------------------------------
# Name:    sendFiles
# Desc:    Since this process for sending files from the access and preservation
#          folders is pretty much the same, I created a subroutine to do it.
#          Note: this sub is verbatim from dra-mdss with minor mods
#          Not very DRY....
# Inputs:  local source directory, remote directory, filename
# Outputs: Errors, if any
# ----------------------------------------------------------------------------
sub sendFiles {

    my ($srcDir, $remoteSrcDir, $file) = @_;
    my @errors;

    my $src = Path::Class::File->new($srcDir, $file);
    # Create MD5 sum
    DRA::logger("Creating MD5 sum for $file ...", $projectLogPath);
    my ($md5file, $error) = DRA::createMD5($src, $file);
    if ($error) {
        DRA::logger("Failed!", $projectLogPath);
        my $message = "MD5 creation failed: $error";
        push @errors, $message;
    }
    else {
        DRA::logger("done.", $projectLogPath);
    }

    # Send MD5 sum to MDSS
    my $md5src  = $file . ".md5";
    my $md5path = Path::Class::File->new($srcDir, $md5src);
    my $md5dest = Path::Class::File->new($remoteSrcDir, $md5src);
    DRA::logger("Sending MD5 file $md5src ...", $projectLogPath);
    my $put_err1 = DRA::hsiPut(
        {
        source => $md5path,
        dest   => $md5dest,
        hsi    => $hsi,
        opts   => $hsiOptLine,
        ports  => $hsiPorts,
        keytab => $keytabFile,
        }
    );
    if ($put_err1) {
        DRA::logger("Failed!", $projectLogPath);
        my $message = "Failed to send file: $!";
        push @errors, $message;
    }
    else {
        DRA::logger("done.", $projectLogPath);
    }

    # Send file to MDSS
    my $dest = Path::Class::File->new($remoteSrcDir, $file);
    DRA::logger("Sending $file ...", $projectLogPath);
    my $put_err2 = DRA::hsiPut(
        {
        source => $src,
        dest   => $dest,
        hsi    => $hsi,
        opts   => $hsiOptLine,
        ports  => $hsiPorts,
        keytab => $keytabFile,
        }
    );
    if ($put_err2) {
        DRA::logger("Failed!", $projectLogPath);
        my $message = "Failed to send file: $!";
        push @errors, $message;
    }
    else {
        DRA::logger("done.", $projectLogPath);
    }

    # Check transfer
    DRA::logger("Verifying ...", $projectLogPath);
    my $check_err = DRA::hsiCheck(
        {
        file   => $file,
        path   => $remoteSrcDir,
        hsi    => $hsi,
        opts   => $hsiOptLine,
        ports  => $hsiPorts,
        temp   => $tempDir,
        keytab => $keytabFile,
        }
    );
    if ($check_err) {
        DRA::logger("Failed!", $projectLogPath);
        my $message = "Verification failed: $!";
        push @errors, $message;
    }
    else {
        DRA::logger("Passed!", $projectLogPath);
    }

    # Return any errors
    if (@errors) {
        my $line = join "\n", @errors;
        return $line;
    }
    else {
        return 0;
    }

}

# -------------------------------------------------------------------
# Name: error, help
# Desc: Just an error and help routine...nothing to see here...
#       move along...
# -------------------------------------------------------------------

sub error {
    my $message = shift;

    if ($message) {
        print $message . "\n";
    }
    else {
        print "Invalid option\n";
        &main::help;
    }

    exit 1;
}

sub help {
    print "Usage: dra-video [-help] [-f] [video.conf options] [project_directory] \n";
}



# -------------------------------------------------------------------
# Name: remoteCommand
# Desc: Runs command on remote system croaking on any error
# -------------------------------------------------------------------

sub remoteCommand {

    my $command = shift;

    my ($out, $err) = DRA::sshCommand(
        {
        user    => $draUser,
        sshKey  => $sshKeyPath,
        host    => $draServer,
        command => $command,
        opts    => $sshOpts,
        }
    );

    if ($err) {
        croak "Remote command failed.  Error was:\n $err";
    }
    else {
        return $out;
    }

}



# -------------------------------------------------------------------
# Name: remoteQuietCommand
# Desc: Runs command on remote system quietly returning any errors
# -------------------------------------------------------------------

sub remoteQuietCommand {

    my $command = shift;

    my ($out, $err) = DRA::sshCommand(
        {
        user    => $draUser,
        sshKey  => $sshKeyPath,
        host    => $draServer,
        command => $command,
        opts    => $sshOpts,
        }
    );

    return ($out, $err);

}


# -----------------------------------------------------------------------------
# Name: remoteFileExists
# Desc: Detects presence of file in the project directory of the remote system
#       Returns 0 if file does not exists or the underlying command returns
#       an error.
#       Returns 1 if the file exists, or the underlying command returns
#       success.
# Reqs: Requires remoteProjectDir variable which should be declared earlier in
#       the script.
# Inpt: Name of the file
# Outp: 0 for not found; 1 if the file is found
# -----------------------------------------------------------------------------

sub remoteFileExists {

    my $file = shift;
    my $command = "find $remoteProjectDir -name $file";
    my ($out, $err) = main::remoteQuietCommand($command);

    if ($err) {
        my $message
            = "Remote find command failed - script aborting "
            . "Error was:\n$err";
        DRA::logger($message, $errorLogPath);
        DRA::logger($message, $videoLogPath);
        croak $message;
    }
    else {
        if ($out) {
            return 1;
        }
        else {
            return 0;
        }
    }

}

# -----------------------------------------------------------------------------
# Name: evaliuateErrors
# Desc: Checks the @error array for messages and croaks if there are any
# -----------------------------------------------------------------------------

sub evaluateErrors {

    if ($errors[0]) {
        my $line = join "\n", @errors;
        if ($force) {
            DRA::logger("Errors found - ignoring", $videoLogPath);
            DRA::logger("Errors were: $line", $videoLogPath);
        }
        else {
            DRA::logger("Errors were found - writing to log", $videoLogPath);
            DRA::logger( $line,                               $errorLogPath);
            croak(
                qq{Errors were found with the project directory\n},
                qq{Script will terminate now\n},
            );
        }
    }

}

__END__

=head1 DRA-VIDEO

dra-video - Transfers video files to local server and MDSS

=head1 VERSION

This documentation refers to dra-video version 2.1

=head1 USAGE

B<dra-video [-help] [-f] [video.conf options] [project_directory]>

=head1 REQUIRED ARGUMENTS

A B<project directory> is required for the script to run. This must be the
full path the directory.  For example:

B<dra-video /Volumes/audio/Concerts/2010_fall/20100923vab1234>

=head1 OPTIONS

B<-help> Displays brief synopsis of usage.

B<-f> Force flag.  The project will be transferred regardless of any errors or
if the concert was successfully sent at an earlier time.

B<video.conf> Any setting from the video.conf file may be passed to the script
at runtime in the format:

-[variable name] [value]

Example:

B<dra-video -email joebob@indiana.edu [directory]>

Will execute the script overriding the email address specified in video.conf
with joebob@indiana.edu

=head1 DESCRIPTION

This script works in conjunction with dra-transfer to coordinate transfers of
video files to the main dra server and to MDSS. Whereas dra-transfer and
dra-mdss are intended to be run from a single machine or server where audio
data is "pulled" from different workstations, dra-video is designed to be run
on multiple workstations where video data is "pushed" to both the main dra
server and mdss.

Processing a project directory will take two executions of the dra-video
script.  On the first pass, the script will first check for properly named
files and folders.  If these are correct, it will next create a text listing
of files and send them to the main dra server.  A corresponding project
directory will already exist on the main dra server with any relevant audio
data.  Once this file listing is copied to the server, the dra-transfer script
will be able to complete its transfer of audio data to Variations and MDSS.
See the documentation for dra-transfer and dra-mdss for more information.

On the second pass of the script, dra-video logs into the main dra server to
determine if both dra-transfer and dra-mdss have completed successfully. Upon
the successful complete of both those scripts, dra-video will transfer dvd
image files to the main dra server, and then transfer all video files to MDSS.
 Individual video files are transferred via HSI, and are re-downloaded to
verify md5 sums.  Folders of video files are transferred via HTAR.

The last step of the script is to copy the video transfer log to the dra
server for additional storage.

=head1 DIAGNOSTICS

Upon successful completion of the script, dra-video returns no output.
Otherwise, errors are reported to STDOUT as well as an error log file in the
project log directory.  Additional information about the scripts overall
progress is written to a script-level log file under the script log directory.
 By default, this is the logs directory in the application's home directory.

=head1 CONFIGURATION AND ENVIRONMENT

A properly configured video.conf file should be sufficient for dra-video
script to run. The format is the same as the dra.conf file and has many
duplicated values. However, there is no shared information in either of the
configuration files.  So any relevant changes to dra.conf must also be
duplicated in video.conf and vice versa.

The DRA_HOME environment variable is required and can be set on a per-user
basis or at execution time.

=head1 DEPENDENCIES

HTAR and HSI are required to send the files to MDSS.  These applications are
available through IU's mass datastore service.  See
http://kb.iu.edu/data/auvo.html for the latest client builds available.

You will also need to create kerberos keytab files to enable automate access
to the mdss account. For more information on creating keytab files, see
http://kb.iu.edu/data/avdb.html.

=head1 AUTHOR

Adam Wead     awead@indiana.edu, amsterdamos@gmail.com

=head1 LICENCE AND COPYRIGHT

Copyright 2012, the Trustees of Indiana University.

=cut

